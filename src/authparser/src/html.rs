// auto-generated: "lalrpop 0.20.0"
// sha3: 4ec93658c7e577f370de3dfdf4551d223f8da915d9294f3b5776c847c0049ad3
use crate::lexer::{Tokens,Location,LexicalError};
use std::vec::Vec;
use std::string::String;
use authcomp::{AuthT,Computation,AuthType,ProofStream};
use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
use indextree::{NodeId,Arena};
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
extern crate core;
extern crate alloc;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__Attr {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0,
        // State 1
        6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        -36,
        // State 3
        0,
        // State 4
        -1,
        // State 5
        -6,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            0 => 2,
            3 => 4,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = Attribute;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => __state_machine::SimulatedReduce::Accept,
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct AttrParser {
        _priv: (),
    }

    impl AttrParser {
        pub fn new() -> AttrParser {
            AttrParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<Attribute, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<Attribute,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                // __Attr = Attr => ActionFn(2);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action2::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__Attr::AttrParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__AttrValue {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        -37,
        // State 2
        -6,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            3 => 1,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = &'source str;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => __state_machine::SimulatedReduce::Accept,
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct AttrValueParser {
        _priv: (),
    }

    impl AttrValueParser {
        pub fn new() -> AttrValueParser {
            AttrValueParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<&'source str, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<&'source str,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                // __AttrValue = AttrValue => ActionFn(1);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action1::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__AttrValue::AttrValueParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__Attrs {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0,
        // State 2
        9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        -7,
        // State 1
        -8,
        // State 2
        0,
        // State 3
        -4,
        // State 4
        -38,
        // State 5
        0,
        // State 6
        -5,
        // State 7
        -1,
        // State 8
        -6,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            0 => match state {
                1 => 6,
                _ => 3,
            },
            2 => 1,
            3 => 7,
            4 => 4,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = Vec<Attribute>;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => __state_machine::SimulatedReduce::Accept,
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct AttrsParser {
        _priv: (),
    }

    impl AttrsParser {
        pub fn new() -> AttrsParser {
            AttrsParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<Vec<Attribute>, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<Vec<Attribute>,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                // __Attrs = Attrs => ActionFn(3);
                let __sym0 = __pop_Variant3(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action3::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__Attrs::AttrsParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__ClosingTag {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        -39,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        -9,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            5 => 1,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = QualName;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => __state_machine::SimulatedReduce::Accept,
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct ClosingTagParser {
        _priv: (),
    }

    impl ClosingTagParser {
        pub fn new() -> ClosingTagParser {
            ClosingTagParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<QualName, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<QualName,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                // __ClosingTag = ClosingTag => ActionFn(5);
                let __sym0 = __pop_Variant4(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action5::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__ClosingTag::ClosingTagParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__Element {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0,
        // State 1
        0, 23, 0, 24, 25, 26, 27, 0, 4, 0, 0, 5, 0, 0, 0, 0, 28, 0, 0, 29,
        // State 2
        0, 23, 0, 24, 25, 26, 27, 0, 4, 0, 0, 5, 0, 0, 0, 0, 28, 0, 0, 29,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 33, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 37, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 41, 0, 0, -7, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 41, 0, 0, -8, 0,
        // State 7
        48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, -13, 0, -13, -13, -13, -13, 0, -13, 0, 0, -13, 0, 0, 0, 0, -13, 0, 0, -13,
        // State 10
        0, -12, 0, -12, -12, -12, -12, 0, -12, 0, 0, -12, 0, 0, 0, 0, -12, 0, 0, -12,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0,
        // State 12
        0, -29, 0, -29, -29, -29, -29, 0, -29, 0, 0, -29, 0, 0, 0, 0, -29, 0, 0, -29,
        // State 13
        0, -16, 0, -16, -16, -16, -16, 0, -16, 0, 0, -16, 0, 0, 0, 0, -16, 0, 0, -16,
        // State 14
        0, -18, 0, -18, -18, -18, -18, 0, -18, 0, 0, -18, 0, 0, 0, 0, -18, 0, 0, -18,
        // State 15
        0, -26, 0, -26, -26, -26, -26, 0, -26, 0, 0, -26, 0, 0, 0, 0, -26, 0, 0, -26,
        // State 16
        0, -17, 0, -17, -17, -17, -17, 0, -17, 0, 0, -17, 0, 0, 0, 0, -17, 0, 0, -17,
        // State 17
        0, -23, 0, -23, -23, -23, -23, 0, -23, 0, 0, -23, 0, 0, 0, 0, -23, 0, 0, -23,
        // State 18
        0, -20, 0, -20, -20, -20, -20, 0, -20, 0, 0, -20, 0, 0, 0, 0, -20, 0, 0, -20,
        // State 19
        0, -21, 0, -21, -21, -21, -21, 0, -21, 0, 0, -21, 0, 0, 0, 0, -21, 0, 0, -21,
        // State 20
        0, -19, 0, -19, -19, -19, -19, 0, -19, 0, 0, -19, 0, 0, 0, 0, -19, 0, 0, -19,
        // State 21
        0, -22, 0, -22, -22, -22, -22, 0, -22, 0, 0, -22, 0, 0, 0, 0, -22, 0, 0, -22,
        // State 22
        0, -53, 0, -53, -53, -53, -53, 0, -53, 0, 0, -53, 0, 0, 0, 0, -53, 0, 0, -53,
        // State 23
        0, -14, 0, -14, -14, -14, -14, 0, -14, 0, 0, -14, 0, 0, 0, 0, -14, 0, 0, -14,
        // State 24
        0, -15, 0, -15, -15, -15, -15, 0, -15, 0, 0, -15, 0, 0, 0, 0, -15, 0, 0, -15,
        // State 25
        0, -32, 0, -32, -32, -32, -32, 0, -32, 0, 0, -32, 0, 0, 0, 0, -32, 0, 0, -32,
        // State 26
        0, -61, 0, -61, -61, -61, -61, 0, -61, 0, 0, -61, 0, 0, 0, 0, -61, 0, 0, -61,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 38, 0, 0,
        // State 28
        0, -35, 0, -35, -35, -35, -35, 0, -35, 0, 0, -35, 0, 0, 0, 0, -35, 0, 0, -35,
        // State 29
        0, -30, 0, -30, -30, -30, -30, 0, -30, 0, 0, -30, 0, 0, 0, 0, -30, 0, 0, -30,
        // State 30
        0, -27, 0, -27, -27, -27, -27, 0, -27, 0, 0, -27, 0, 0, 0, 0, -27, 0, 0, -27,
        // State 31
        0, -58, 0, -58, -58, -58, -58, 0, -58, 0, 0, -58, 0, 0, 0, 0, -58, 0, 0, -58,
        // State 32
        0, -59, 0, -59, -59, -59, -59, 0, -59, 0, 0, -59, 0, 0, 0, 0, -59, 0, 0, -59,
        // State 33
        0, -60, 0, -60, -60, -60, -60, 0, -60, 0, 0, -60, 0, 0, 0, 0, -60, 0, 0, -60,
        // State 34
        0, -62, 0, -62, -62, -62, -62, 0, -62, 0, 0, -62, 0, 0, 0, 0, -62, 0, 0, -62,
        // State 35
        0, -63, 0, -63, -63, -63, -63, 0, -63, 0, 0, -63, 0, 0, 0, 0, -63, 0, 0, -63,
        // State 36
        0, -64, 0, -64, -64, -64, -64, 0, -64, 0, 0, -64, 0, 0, 0, 0, -64, 0, 0, -64,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, -4, 0, 0, -4, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 45, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, -5, 0, 0, -5, 0,
        // State 43
        0, -28, 0, -28, -28, -28, -28, 0, -28, 0, 0, -28, 0, 0, 0, 0, -28, 0, 0, -28,
        // State 44
        0, -31, 0, -31, -31, -31, -31, 0, -31, 0, 0, -31, 0, 0, 0, 0, -31, 0, 0, -31,
        // State 45
        0, -9, 0, -9, -9, -9, -9, 0, -9, 0, 0, -9, 0, 0, 0, 0, -9, 0, 0, -9,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, -6, 0, 0, -6, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        -40,
        // State 9
        -13,
        // State 10
        -12,
        // State 11
        0,
        // State 12
        -29,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        -30,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        -31,
        // State 45
        -9,
        // State 46
        0,
        // State 47
        0,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            0 => match state {
                6 => 42,
                _ => 38,
            },
            2 => 6,
            3 => 46,
            4 => 39,
            5 => match state {
                2 => 29,
                _ => 12,
            },
            7 => match state {
                1..=2 => 13,
                _ => 8,
            },
            8 => 14,
            9 => match state {
                2 => 30,
                _ => 15,
            },
            11 => 2,
            12 => 1,
            13 => 9,
            14 => 10,
            15 => 16,
            17 => 17,
            35 => 18,
            37 => 19,
            38 => 31,
            39 => 20,
            40 => 21,
            41 => 34,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = NodeId;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => __state_machine::SimulatedReduce::Accept,
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct ElementParser {
        _priv: (),
    }

    impl ElementParser {
        pub fn new() -> ElementParser {
            ElementParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<NodeId, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<NodeId,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                // __Element = Element => ActionFn(8);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action8::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__Element::ElementParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__HtmlComment {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        -41,
        // State 2
        -14,
        // State 3
        -15,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            8 => 1,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = NodeId;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => __state_machine::SimulatedReduce::Accept,
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct HtmlCommentParser {
        _priv: (),
    }

    impl HtmlCommentParser {
        pub fn new() -> HtmlCommentParser {
            HtmlCommentParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<NodeId, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<NodeId,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                // __HtmlComment = HtmlComment => ActionFn(9);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action9::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__HtmlComment::HtmlCommentParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__Node {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 20, 0, 21, 22, 23, 24, 0, 3, 0, 0, 4, 0, 0, 0, 0, 25, 0, 0, 26,
        // State 1
        0, 20, 0, 21, 22, 23, 24, 0, 3, 0, 0, 4, 0, 0, 0, 0, 29, 0, 0, 26,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 35, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 20, 0, 21, 22, 23, 24, 0, 3, 0, 0, 4, 0, 0, 0, 0, 29, 0, 0, 26,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 41, 0, 0, -7, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 41, 0, 0, -8, 0,
        // State 7
        48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, -16, 0, -16, -16, -16, -16, 0, -16, 0, 0, -16, 0, 0, 0, 0, -16, 0, 0, -16,
        // State 9
        0, -18, 0, -18, -18, -18, -18, 0, -18, 0, 0, -18, 0, 0, 0, 0, -18, 0, 0, -18,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, -13, 0, -13, -13, -13, -13, 0, -13, 0, 0, -13, 0, 0, 0, 0, -13, 0, 0, -13,
        // State 12
        0, -12, 0, -12, -12, -12, -12, 0, -12, 0, 0, -12, 0, 0, 0, 0, -12, 0, 0, -12,
        // State 13
        0, -17, 0, -17, -17, -17, -17, 0, -17, 0, 0, -17, 0, 0, 0, 0, -17, 0, 0, -17,
        // State 14
        0, -23, 0, -23, -23, -23, -23, 0, -23, 0, 0, -23, 0, 0, 0, 0, -23, 0, 0, -23,
        // State 15
        0, -20, 0, -20, -20, -20, -20, 0, -20, 0, 0, -20, 0, 0, 0, 0, -20, 0, 0, -20,
        // State 16
        0, -21, 0, -21, -21, -21, -21, 0, -21, 0, 0, -21, 0, 0, 0, 0, -21, 0, 0, -21,
        // State 17
        0, -19, 0, -19, -19, -19, -19, 0, -19, 0, 0, -19, 0, 0, 0, 0, -19, 0, 0, -19,
        // State 18
        0, -22, 0, -22, -22, -22, -22, 0, -22, 0, 0, -22, 0, 0, 0, 0, -22, 0, 0, -22,
        // State 19
        0, -53, 0, -53, -53, -53, -53, 0, -53, 0, 0, -53, 0, 0, 0, 0, -53, 0, 0, -53,
        // State 20
        0, -14, 0, -14, -14, -14, -14, 0, -14, 0, 0, -14, 0, 0, 0, 0, -14, 0, 0, -14,
        // State 21
        0, -15, 0, -15, -15, -15, -15, 0, -15, 0, 0, -15, 0, 0, 0, 0, -15, 0, 0, -15,
        // State 22
        0, -32, 0, -32, -32, -32, -32, 0, -32, 0, 0, -32, 0, 0, 0, 0, -32, 0, 0, -32,
        // State 23
        0, -61, 0, -61, -61, -61, -61, 0, -61, 0, 0, -61, 0, 0, 0, 0, -61, 0, 0, -61,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0,
        // State 25
        0, -35, 0, -35, -35, -35, -35, 0, -35, 0, 0, -35, 0, 0, 0, 0, -35, 0, 0, -35,
        // State 26
        0, -29, 0, -29, -29, -29, -29, 0, -29, 0, 0, -29, 0, 0, 0, 0, -29, 0, 0, -29,
        // State 27
        0, -26, 0, -26, -26, -26, -26, 0, -26, 0, 0, -26, 0, 0, 0, 0, -26, 0, 0, -26,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 38, 0, 0,
        // State 29
        0, -58, 0, -58, -58, -58, -58, 0, -58, 0, 0, -58, 0, 0, 0, 0, -58, 0, 0, -58,
        // State 30
        0, -59, 0, -59, -59, -59, -59, 0, -59, 0, 0, -59, 0, 0, 0, 0, -59, 0, 0, -59,
        // State 31
        0, -60, 0, -60, -60, -60, -60, 0, -60, 0, 0, -60, 0, 0, 0, 0, -60, 0, 0, -60,
        // State 32
        0, -62, 0, -62, -62, -62, -62, 0, -62, 0, 0, -62, 0, 0, 0, 0, -62, 0, 0, -62,
        // State 33
        0, -63, 0, -63, -63, -63, -63, 0, -63, 0, 0, -63, 0, 0, 0, 0, -63, 0, 0, -63,
        // State 34
        0, -64, 0, -64, -64, -64, -64, 0, -64, 0, 0, -64, 0, 0, 0, 0, -64, 0, 0, -64,
        // State 35
        0, -30, 0, -30, -30, -30, -30, 0, -30, 0, 0, -30, 0, 0, 0, 0, -30, 0, 0, -30,
        // State 36
        0, -27, 0, -27, -27, -27, -27, 0, -27, 0, 0, -27, 0, 0, 0, 0, -27, 0, 0, -27,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, -4, 0, 0, -4, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 45, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, -5, 0, 0, -5, 0,
        // State 43
        0, -28, 0, -28, -28, -28, -28, 0, -28, 0, 0, -28, 0, 0, 0, 0, -28, 0, 0, -28,
        // State 44
        0, -31, 0, -31, -31, -31, -31, 0, -31, 0, 0, -31, 0, 0, 0, 0, -31, 0, 0, -31,
        // State 45
        0, -9, 0, -9, -9, -9, -9, 0, -9, 0, 0, -9, 0, 0, 0, 0, -9, 0, 0, -9,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, -6, 0, 0, -6, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        -16,
        // State 9
        -18,
        // State 10
        -42,
        // State 11
        -13,
        // State 12
        -12,
        // State 13
        -17,
        // State 14
        -23,
        // State 15
        -20,
        // State 16
        -21,
        // State 17
        -19,
        // State 18
        -22,
        // State 19
        -53,
        // State 20
        -14,
        // State 21
        -15,
        // State 22
        -32,
        // State 23
        -61,
        // State 24
        0,
        // State 25
        -35,
        // State 26
        -29,
        // State 27
        0,
        // State 28
        0,
        // State 29
        -58,
        // State 30
        -59,
        // State 31
        -60,
        // State 32
        -62,
        // State 33
        -63,
        // State 34
        -64,
        // State 35
        -30,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        -31,
        // State 45
        -9,
        // State 46
        0,
        // State 47
        0,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            0 => match state {
                6 => 42,
                _ => 38,
            },
            2 => 6,
            3 => 46,
            4 => 39,
            5 => match state {
                4 => 35,
                _ => 26,
            },
            7 => 8,
            8 => 9,
            9 => match state {
                1 => 27,
                4 => 36,
                _ => 10,
            },
            11 => 4,
            12 => 1,
            13 => 11,
            14 => 12,
            15 => 13,
            17 => 14,
            35 => 15,
            37 => 16,
            38 => 29,
            39 => 17,
            40 => 18,
            41 => 32,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = NodeId;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => __state_machine::SimulatedReduce::Accept,
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct NodeParser {
        _priv: (),
    }

    impl NodeParser {
        pub fn new() -> NodeParser {
            NodeParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<NodeId, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<NodeId,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                // __Node = Node => ActionFn(10);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action10::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__Node::NodeParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__OpeningTag {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 9, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 9, 0, 0, 0, 0,
        // State 3
        13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, -4, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, -5, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, -6, 0, 0, 0, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        -43,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        -28,
        // State 11
        0,
        // State 12
        0,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            0 => match state {
                2 => 9,
                _ => 6,
            },
            2 => 2,
            3 => 11,
            4 => 7,
            12 => 4,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = (QualName, Vec<Attribute>);
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => __state_machine::SimulatedReduce::Accept,
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct OpeningTagParser {
        _priv: (),
    }

    impl OpeningTagParser {
        pub fn new() -> OpeningTagParser {
            OpeningTagParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<(QualName, Vec<Attribute>), __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<(QualName, Vec<Attribute>),__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                // __OpeningTag = OpeningTag => ActionFn(4);
                let __sym0 = __pop_Variant8(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action4::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__OpeningTag::OpeningTagParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__ParentTag {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0,
        // State 1
        0, 24, 0, 25, 26, 27, 28, 0, 4, 0, 0, 5, 0, 0, 0, 0, 29, 0, 0, 30,
        // State 2
        0, 24, 0, 25, 26, 27, 28, 0, 4, 0, 0, 5, 0, 0, 0, 0, 29, 0, 0, 30,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 34, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 38, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 42, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 42, 0, 0, -7, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 42, 0, 0, -8, 0,
        // State 8
        50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0,
        // State 11
        0, -29, 0, -29, -29, -29, -29, 0, -29, 0, 0, -29, 0, 0, 0, 0, -29, 0, 0, -29,
        // State 12
        0, -16, 0, -16, -16, -16, -16, 0, -16, 0, 0, -16, 0, 0, 0, 0, -16, 0, 0, -16,
        // State 13
        0, -18, 0, -18, -18, -18, -18, 0, -18, 0, 0, -18, 0, 0, 0, 0, -18, 0, 0, -18,
        // State 14
        0, -26, 0, -26, -26, -26, -26, 0, -26, 0, 0, -26, 0, 0, 0, 0, -26, 0, 0, -26,
        // State 15
        0, -13, 0, -13, -13, -13, -13, 0, -13, 0, 0, -13, 0, 0, 0, 0, -13, 0, 0, -13,
        // State 16
        0, -12, 0, -12, -12, -12, -12, 0, -12, 0, 0, -12, 0, 0, 0, 0, -12, 0, 0, -12,
        // State 17
        0, -17, 0, -17, -17, -17, -17, 0, -17, 0, 0, -17, 0, 0, 0, 0, -17, 0, 0, -17,
        // State 18
        0, -23, 0, -23, -23, -23, -23, 0, -23, 0, 0, -23, 0, 0, 0, 0, -23, 0, 0, -23,
        // State 19
        0, -20, 0, -20, -20, -20, -20, 0, -20, 0, 0, -20, 0, 0, 0, 0, -20, 0, 0, -20,
        // State 20
        0, -21, 0, -21, -21, -21, -21, 0, -21, 0, 0, -21, 0, 0, 0, 0, -21, 0, 0, -21,
        // State 21
        0, -19, 0, -19, -19, -19, -19, 0, -19, 0, 0, -19, 0, 0, 0, 0, -19, 0, 0, -19,
        // State 22
        0, -22, 0, -22, -22, -22, -22, 0, -22, 0, 0, -22, 0, 0, 0, 0, -22, 0, 0, -22,
        // State 23
        0, -53, 0, -53, -53, -53, -53, 0, -53, 0, 0, -53, 0, 0, 0, 0, -53, 0, 0, -53,
        // State 24
        0, -14, 0, -14, -14, -14, -14, 0, -14, 0, 0, -14, 0, 0, 0, 0, -14, 0, 0, -14,
        // State 25
        0, -15, 0, -15, -15, -15, -15, 0, -15, 0, 0, -15, 0, 0, 0, 0, -15, 0, 0, -15,
        // State 26
        0, -32, 0, -32, -32, -32, -32, 0, -32, 0, 0, -32, 0, 0, 0, 0, -32, 0, 0, -32,
        // State 27
        0, -61, 0, -61, -61, -61, -61, 0, -61, 0, 0, -61, 0, 0, 0, 0, -61, 0, 0, -61,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 39, 0, 0,
        // State 29
        0, -35, 0, -35, -35, -35, -35, 0, -35, 0, 0, -35, 0, 0, 0, 0, -35, 0, 0, -35,
        // State 30
        0, -30, 0, -30, -30, -30, -30, 0, -30, 0, 0, -30, 0, 0, 0, 0, -30, 0, 0, -30,
        // State 31
        0, -27, 0, -27, -27, -27, -27, 0, -27, 0, 0, -27, 0, 0, 0, 0, -27, 0, 0, -27,
        // State 32
        0, -58, 0, -58, -58, -58, -58, 0, -58, 0, 0, -58, 0, 0, 0, 0, -58, 0, 0, -58,
        // State 33
        0, -59, 0, -59, -59, -59, -59, 0, -59, 0, 0, -59, 0, 0, 0, 0, -59, 0, 0, -59,
        // State 34
        0, -60, 0, -60, -60, -60, -60, 0, -60, 0, 0, -60, 0, 0, 0, 0, -60, 0, 0, -60,
        // State 35
        0, -62, 0, -62, -62, -62, -62, 0, -62, 0, 0, -62, 0, 0, 0, 0, -62, 0, 0, -62,
        // State 36
        0, -63, 0, -63, -63, -63, -63, 0, -63, 0, 0, -63, 0, 0, 0, 0, -63, 0, 0, -63,
        // State 37
        0, -64, 0, -64, -64, -64, -64, 0, -64, 0, 0, -64, 0, 0, 0, 0, -64, 0, 0, -64,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, -4, 0, 0, -4, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 47, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, -5, 0, 0, -5, 0,
        // State 45
        0, -28, 0, -28, -28, -28, -28, 0, -28, 0, 0, -28, 0, 0, 0, 0, -28, 0, 0, -28,
        // State 46
        0, -31, 0, -31, -31, -31, -31, 0, -31, 0, 0, -31, 0, 0, 0, 0, -31, 0, 0, -31,
        // State 47
        0, -9, 0, -9, -9, -9, -9, 0, -9, 0, 0, -9, 0, 0, 0, 0, -9, 0, 0, -9,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, -6, 0, 0, -6, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        -44,
        // State 10
        0,
        // State 11
        -29,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        -30,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        -9,
        // State 48
        0,
        // State 49
        0,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            0 => match state {
                7 => 44,
                _ => 39,
            },
            2 => 7,
            3 => 48,
            4 => match state {
                6 => 42,
                _ => 40,
            },
            5 => match state {
                2 => 30,
                _ => 11,
            },
            7 => 12,
            8 => 13,
            9 => match state {
                2 => 31,
                _ => 14,
            },
            11 => 2,
            12 => 1,
            13 => match state {
                1..=2 => 15,
                _ => 9,
            },
            14 => 16,
            15 => 17,
            17 => 18,
            35 => 19,
            37 => 20,
            38 => 32,
            39 => 21,
            40 => 22,
            41 => 35,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = NodeId;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => __state_machine::SimulatedReduce::Accept,
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct ParentTagParser {
        _priv: (),
    }

    impl ParentTagParser {
        pub fn new() -> ParentTagParser {
            ParentTagParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<NodeId, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<NodeId,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                // __ParentTag = ParentTag => ActionFn(7);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action7::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__ParentTag::ParentTagParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__SingleTag {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, -7, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, -8, 0,
        // State 3
        13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, -4, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, -5, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, -6, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        -45,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        -31,
        // State 11
        0,
        // State 12
        0,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            0 => match state {
                2 => 9,
                _ => 6,
            },
            2 => 2,
            3 => 11,
            4 => 7,
            14 => 4,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = NodeId;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => __state_machine::SimulatedReduce::Accept,
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct SingleTagParser {
        _priv: (),
    }

    impl SingleTagParser {
        pub fn new() -> SingleTagParser {
            SingleTagParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<NodeId, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<NodeId,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                // __SingleTag = SingleTag => ActionFn(6);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action6::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__SingleTag::SingleTagParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__cdata {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        -46,
        // State 2
        -53,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            35 => 1,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = NodeId;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => __state_machine::SimulatedReduce::Accept,
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct cdataParser {
        _priv: (),
    }

    impl cdataParser {
        pub fn new() -> cdataParser {
            cdataParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<NodeId, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<NodeId,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                // __cdata = cdata => ActionFn(11);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action11::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__cdata::cdataParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__htmlDocument {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 24, 3, 25, 26, 27, 28, 0, 4, 0, 0, 5, 0, 0, 0, 0, 29, 0, 0, 6,
        // State 1
        0, 24, 0, 25, 26, 27, 28, 0, 4, 0, 0, 5, 0, 0, 0, 0, 32, 0, 0, 33,
        // State 2
        0, 24, 0, 25, 26, 27, 28, 0, 4, 0, 0, 5, 0, 0, 0, 0, 29, 0, 0, 33,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 36, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 40, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 24, 9, 25, 26, 27, 28, 0, 4, 0, 0, 5, 0, 0, 0, 0, 29, 0, 0, 33,
        // State 6
        0, 24, 0, 25, 26, 27, 28, 0, 4, 0, 0, 5, 0, 0, 0, 0, 32, 0, 0, 33,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 47, 0, 0, -7, 0,
        // State 8
        0, 24, 0, 25, 26, 27, 28, 0, 4, 0, 0, 5, 0, 0, 0, 0, 29, 0, 0, 33,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, 47, 0, 0, -8, 0,
        // State 10
        55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, -16, 0, -16, -16, -16, -16, 0, -16, 0, 0, -16, 0, 0, 0, 0, -16, 0, 0, -16,
        // State 12
        0, -18, 0, -18, -18, -18, -18, 0, -18, 0, 0, -18, 0, 0, 0, 0, -18, 0, 0, -18,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, -13, 0, -13, -13, -13, -13, 0, -13, 0, 0, -13, 0, 0, 0, 0, -13, 0, 0, -13,
        // State 15
        0, -12, 0, -12, -12, -12, -12, 0, -12, 0, 0, -12, 0, 0, 0, 0, -12, 0, 0, -12,
        // State 16
        0, -17, 0, -17, -17, -17, -17, 0, -17, 0, 0, -17, 0, 0, 0, 0, -17, 0, 0, -17,
        // State 17
        0, -23, 0, -23, -23, -23, -23, 0, -23, 0, 0, -23, 0, 0, 0, 0, -23, 0, 0, -23,
        // State 18
        0, -20, 0, -20, -20, -20, -20, 0, -20, 0, 0, -20, 0, 0, 0, 0, -20, 0, 0, -20,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        0, -21, 0, -21, -21, -21, -21, 0, -21, 0, 0, -21, 0, 0, 0, 0, -21, 0, 0, -21,
        // State 21
        0, -19, 0, -19, -19, -19, -19, 0, -19, 0, 0, -19, 0, 0, 0, 0, -19, 0, 0, -19,
        // State 22
        0, -22, 0, -22, -22, -22, -22, 0, -22, 0, 0, -22, 0, 0, 0, 0, -22, 0, 0, -22,
        // State 23
        0, -53, 0, -53, -53, -53, -53, 0, -53, 0, 0, -53, 0, 0, 0, 0, -53, 0, 0, -53,
        // State 24
        0, -14, 0, -14, -14, -14, -14, 0, -14, 0, 0, -14, 0, 0, 0, 0, -14, 0, 0, -14,
        // State 25
        0, -15, 0, -15, -15, -15, -15, 0, -15, 0, 0, -15, 0, 0, 0, 0, -15, 0, 0, -15,
        // State 26
        0, -32, 0, -32, -32, -32, -32, 0, -32, 0, 0, -32, 0, 0, 0, 0, -32, 0, 0, -32,
        // State 27
        0, -61, 0, -61, -61, -61, -61, 0, -61, 0, 0, -61, 0, 0, 0, 0, -61, 0, 0, -61,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
        // State 29
        0, -29, 0, -29, -29, -29, -29, 0, -29, 0, 0, -29, 0, 0, 0, 0, -29, 0, 0, -29,
        // State 30
        0, -26, 0, -26, -26, -26, -26, 0, -26, 0, 0, -26, 0, 0, 0, 0, -26, 0, 0, -26,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 44, 0, 0,
        // State 32
        0, -35, 0, -35, -35, -35, -35, 0, -35, 0, 0, -35, 0, 0, 0, 0, -35, 0, 0, -35,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, -58, 0, -58, -58, -58, -58, 0, -58, 0, 0, -58, 0, 0, 0, 0, -58, 0, 0, -58,
        // State 35
        0, -59, 0, -59, -59, -59, -59, 0, -59, 0, 0, -59, 0, 0, 0, 0, -59, 0, 0, -59,
        // State 36
        0, -60, 0, -60, -60, -60, -60, 0, -60, 0, 0, -60, 0, 0, 0, 0, -60, 0, 0, -60,
        // State 37
        0, -62, 0, -62, -62, -62, -62, 0, -62, 0, 0, -62, 0, 0, 0, 0, -62, 0, 0, -62,
        // State 38
        0, -63, 0, -63, -63, -63, -63, 0, -63, 0, 0, -63, 0, 0, 0, 0, -63, 0, 0, -63,
        // State 39
        0, -64, 0, -64, -64, -64, -64, 0, -64, 0, 0, -64, 0, 0, 0, 0, -64, 0, 0, -64,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 41
        0, -30, 0, -30, -30, -30, -30, 0, -30, 0, 0, -30, 0, 0, 0, 0, -30, 0, 0, -30,
        // State 42
        0, -27, 0, -27, -27, -27, -27, 0, -27, 0, 0, -27, 0, 0, 0, 0, -27, 0, 0, -27,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, -4, 0, 0, -4, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 52, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, -5, 0, 0, -5, 0,
        // State 50
        0, -28, 0, -28, -28, -28, -28, 0, -28, 0, 0, -28, 0, 0, 0, 0, -28, 0, 0, -28,
        // State 51
        0, -31, 0, -31, -31, -31, -31, 0, -31, 0, 0, -31, 0, 0, 0, 0, -31, 0, 0, -31,
        // State 52
        0, -9, 0, -9, -9, -9, -9, 0, -9, 0, 0, -9, 0, 0, 0, 0, -9, 0, 0, -9,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, -6, 0, 0, -6, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        -35,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        -16,
        // State 12
        -18,
        // State 13
        -57,
        // State 14
        -13,
        // State 15
        -12,
        // State 16
        -17,
        // State 17
        -23,
        // State 18
        -20,
        // State 19
        -47,
        // State 20
        -21,
        // State 21
        -19,
        // State 22
        -22,
        // State 23
        -53,
        // State 24
        -14,
        // State 25
        -15,
        // State 26
        -32,
        // State 27
        -61,
        // State 28
        0,
        // State 29
        -29,
        // State 30
        0,
        // State 31
        0,
        // State 32
        -35,
        // State 33
        -55,
        // State 34
        -58,
        // State 35
        -59,
        // State 36
        -60,
        // State 37
        -62,
        // State 38
        -63,
        // State 39
        -64,
        // State 40
        -56,
        // State 41
        -30,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        -54,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        -31,
        // State 52
        -9,
        // State 53
        0,
        // State 54
        0,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            0 => match state {
                9 => 49,
                _ => 44,
            },
            2 => 9,
            3 => 53,
            4 => 45,
            5 => match state {
                6 => 41,
                _ => 29,
            },
            7 => 11,
            8 => 12,
            9 => match state {
                1 => 30,
                2 => 33,
                5 => 40,
                6 => 42,
                8 => 47,
                _ => 13,
            },
            11 => 6,
            12 => 1,
            13 => 14,
            14 => 15,
            15 => 16,
            17 => 17,
            35 => 18,
            36 => 19,
            37 => 20,
            38 => 34,
            39 => 21,
            40 => 22,
            41 => 37,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = NodeId;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => __state_machine::SimulatedReduce::Accept,
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct htmlDocumentParser {
        _priv: (),
    }

    impl htmlDocumentParser {
        pub fn new() -> htmlDocumentParser {
            htmlDocumentParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<NodeId, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<NodeId,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                // __htmlDocument = htmlDocument => ActionFn(0);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action0::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__htmlDocument::htmlDocumentParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__script {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        -48,
        // State 3
        -58,
        // State 4
        -59,
        // State 5
        -60,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            37 => 2,
            38 => 3,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = NodeId;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => __state_machine::SimulatedReduce::Accept,
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct scriptParser {
        _priv: (),
    }

    impl scriptParser {
        pub fn new() -> scriptParser {
            scriptParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<NodeId, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<NodeId,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                // __script = script => ActionFn(13);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action13::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__script::scriptParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__script_inner {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        -49,
        // State 2
        -59,
        // State 3
        -60,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            38 => 1,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = NodeId;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => __state_machine::SimulatedReduce::Accept,
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct script_innerParser {
        _priv: (),
    }

    impl script_innerParser {
        pub fn new() -> script_innerParser {
            script_innerParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<NodeId, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<NodeId,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                // __script_inner = script_inner => ActionFn(14);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action14::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__script_inner::script_innerParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__scriptlet {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        -50,
        // State 2
        -61,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            39 => 1,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = NodeId;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => __state_machine::SimulatedReduce::Accept,
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct scriptletParser {
        _priv: (),
    }

    impl scriptletParser {
        pub fn new() -> scriptletParser {
            scriptletParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<NodeId, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<NodeId,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                // __scriptlet = scriptlet => ActionFn(12);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action12::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__scriptlet::scriptletParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__style {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        -51,
        // State 3
        -62,
        // State 4
        -63,
        // State 5
        -64,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            40 => 2,
            41 => 3,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = NodeId;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => __state_machine::SimulatedReduce::Accept,
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct styleParser {
        _priv: (),
    }

    impl styleParser {
        pub fn new() -> styleParser {
            styleParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<NodeId, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<NodeId,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                // __style = style => ActionFn(15);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action15::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            51 => {
                __reduce51(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce51<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style_inner = style_inner => ActionFn(16);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__style::styleParser;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]
mod __parse__style_inner {

    use crate::lexer::{Tokens,Location,LexicalError};
    use std::vec::Vec;
    use std::string::String;
    use authcomp::{AuthT,Computation,AuthType,ProofStream};
    use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
    use indextree::{NodeId,Arena};
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'source>
     {
        Variant0(&'source str),
        Variant1(Attribute),
        Variant2(alloc::vec::Vec<Attribute>),
        Variant3(Vec<Attribute>),
        Variant4(QualName),
        Variant5(core::option::Option<&'source str>),
        Variant6(NodeId),
        Variant7(alloc::vec::Vec<NodeId>),
        Variant8((QualName, Vec<Attribute>)),
    }
    const __ACTION: &[i8] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i8, integer: usize) -> i8 {
        __ACTION[(state as usize) * 20 + integer]
    }
    const __EOF_ACTION: &[i8] = &[
        // State 0
        0,
        // State 1
        -52,
        // State 2
        -63,
        // State 3
        -64,
    ];
    fn __goto(state: i8, nt: usize) -> i8 {
        match nt {
            41 => 1,
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###"ATTVALUE_VALUE"###,
        r###"CDATA"###,
        r###"DTD"###,
        r###"HTML_COMMENT"###,
        r###"HTML_CONDITIONAL_COMMENT"###,
        r###"HTML_TEXT"###,
        r###"SCRIPTLET"###,
        r###"SCRIPT_BODY"###,
        r###"SCRIPT_OPEN"###,
        r###"SCRIPT_SHORT_BODY"###,
        r###"STYLE_BODY"###,
        r###"STYLE_OPEN"###,
        r###"STYLE_SHORT_BODY"###,
        r###"TAG_CLOSE"###,
        r###"TAG_EQUALS"###,
        r###"TAG_NAME"###,
        r###"TAG_OPEN"###,
        r###"TAG_SLASH"###,
        r###"TAG_SLASH_CLOSE"###,
        r###"XML"###,
    ];
    fn __expected_tokens(__state: i8) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'source,
        '__2,
        '__3,
        C,
    >(
        __states: &[i8],
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), C)>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        input: &'source str,
        document: &'__2 mut Arena<AuthT<Node, C>>,
        root: &'__3 mut Option<NodeId>,
        __phantom: core::marker::PhantomData<(&'source (), C)>,
    }
    impl<'source, '__2, '__3, C> __state_machine::ParserDefinition for __StateMachine<'source, '__2, '__3, C>
    where C: AuthType<Node>, C: Computation, C: '__2
    {
        type Location = Location;
        type Error = LexicalError;
        type Token = Tokens<'source>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'source>;
        type Success = NodeId;
        type StateIndex = i8;
        type Action = i8;
        type ReduceIndex = i8;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn action(&self, state: i8, integer: usize) -> i8 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i8) -> i8 {
            __action(state, 20 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i8) -> i8 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i8, nt: usize) -> i8 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), C)>)
        }

        fn expected_tokens(&self, state: i8) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i8]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), C)>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i8,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i8>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.input,
                self.document,
                self.root,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), C)>,
            )
        }

        fn simulate_reduce(&self, action: i8) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), C)>)
        }
    }
    fn __token_to_integer<
        'source,
        C,
    >(
        __token: &Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<usize>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match *__token {
            Tokens::AttributeValue(_) if true => Some(0),
            Tokens::CdataDeclaration(_) if true => Some(1),
            Tokens::DtdDeclaration(_) if true => Some(2),
            Tokens::HtmlComment(_) if true => Some(3),
            Tokens::HtmlConditionalComment(_) if true => Some(4),
            Tokens::HtmlText(_) if true => Some(5),
            Tokens::ScripletDeclaration(_) if true => Some(6),
            Tokens::ScriptBody(_) if true => Some(7),
            Tokens::ScriptOpen(_) if true => Some(8),
            Tokens::ScriptShortBody(_) if true => Some(9),
            Tokens::StyleBody(_) if true => Some(10),
            Tokens::StyleOpen(_) if true => Some(11),
            Tokens::StyleShortBody(_) if true => Some(12),
            Tokens::TagClose(_) if true => Some(13),
            Tokens::TagEquals(_) if true => Some(14),
            Tokens::TagName(_) if true => Some(15),
            Tokens::TagOpen(_) if true => Some(16),
            Tokens::TagSlash(_) if true => Some(17),
            Tokens::TagSlashClose(_) if true => Some(18),
            Tokens::XmlDeclarationOrPi(_) if true => Some(19),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'source,
        C,
    >(
        __token_index: usize,
        __token: Tokens<'source>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __Symbol<'source>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 => match __token {
                Tokens::AttributeValue(__tok0) | Tokens::CdataDeclaration(__tok0) | Tokens::DtdDeclaration(__tok0) | Tokens::HtmlComment(__tok0) | Tokens::HtmlConditionalComment(__tok0) | Tokens::HtmlText(__tok0) | Tokens::ScripletDeclaration(__tok0) | Tokens::ScriptBody(__tok0) | Tokens::ScriptOpen(__tok0) | Tokens::ScriptShortBody(__tok0) | Tokens::StyleBody(__tok0) | Tokens::StyleOpen(__tok0) | Tokens::StyleShortBody(__tok0) | Tokens::TagClose(__tok0) | Tokens::TagEquals(__tok0) | Tokens::TagName(__tok0) | Tokens::TagOpen(__tok0) | Tokens::TagSlash(__tok0) | Tokens::TagSlashClose(__tok0) | Tokens::XmlDeclarationOrPi(__tok0) if true => __Symbol::Variant0(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'source,
        '__2,
        '__3,
        C,
    >(
        __reduce_index: i8,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'source, '__2, '__3, C>>
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 1,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 12,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 14,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 17,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            51 => __state_machine::SimulatedReduce::Accept,
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 36,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 36,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 41,
                }
            }
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct style_innerParser {
        _priv: (),
    }

    impl style_innerParser {
        pub fn new() -> style_innerParser {
            style_innerParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'source,
            C,
            __TOKEN: __ToTriple<'source, C, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            input: &'source str,
            document: &mut Arena<AuthT<Node, C>>,
            root: &mut Option<NodeId>,
            __tokens0: __TOKENS,
        ) -> Result<NodeId, __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>
        where
            C: AuthType<Node>,
            C: Computation,
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    input,
                    document,
                    root,
                    __phantom: core::marker::PhantomData::<(&(), C)>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'source,
        '__2,
        '__3,
        C,
    >(
        __error_state: Option<i8>,
        __states: &[i8],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> bool
    where
        C: AuthType<Node>,
        C: Computation,
        C: '__2,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), C)>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    pub(crate) fn __reduce<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __action: i8,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i8>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> Option<Result<NodeId,__lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>>
    where
        C: AuthType<Node>,
        C: Computation,
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            1 => {
                __reduce1(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            2 => {
                __reduce2(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            3 => {
                __reduce3(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            4 => {
                __reduce4(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            5 => {
                __reduce5(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            6 => {
                __reduce6(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            7 => {
                __reduce7(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            8 => {
                __reduce8(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            9 => {
                __reduce9(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            10 => {
                __reduce10(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            11 => {
                __reduce11(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            12 => {
                __reduce12(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            13 => {
                __reduce13(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            14 => {
                __reduce14(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            15 => {
                __reduce15(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            16 => {
                __reduce16(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            17 => {
                __reduce17(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            18 => {
                __reduce18(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            19 => {
                __reduce19(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            20 => {
                __reduce20(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            21 => {
                __reduce21(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            22 => {
                __reduce22(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            23 => {
                __reduce23(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            24 => {
                __reduce24(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            25 => {
                __reduce25(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            26 => {
                __reduce26(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            27 => {
                __reduce27(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            28 => {
                __reduce28(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            29 => {
                __reduce29(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            30 => {
                __reduce30(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            31 => {
                __reduce31(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            32 => {
                __reduce32(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            33 => {
                __reduce33(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            34 => {
                __reduce34(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            35 => {
                __reduce35(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            36 => {
                __reduce36(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            37 => {
                __reduce37(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            38 => {
                __reduce38(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            39 => {
                __reduce39(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            40 => {
                __reduce40(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            41 => {
                __reduce41(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            42 => {
                __reduce42(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            43 => {
                __reduce43(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            44 => {
                __reduce44(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            45 => {
                __reduce45(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            46 => {
                __reduce46(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            47 => {
                __reduce47(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            48 => {
                __reduce48(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            49 => {
                __reduce49(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            50 => {
                __reduce50(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            51 => {
                // __style_inner = style_inner => ActionFn(16);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action16::<C>(input, document, root, __sym0);
                return Some(Ok(__nt));
            }
            52 => {
                __reduce52(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            53 => {
                __reduce53(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            54 => {
                __reduce54(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            55 => {
                __reduce55(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            56 => {
                __reduce56(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            57 => {
                __reduce57(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            58 => {
                __reduce58(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            59 => {
                __reduce59(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            60 => {
                __reduce60(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            61 => {
                __reduce61(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            62 => {
                __reduce62(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            63 => {
                __reduce63(input, document, root, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), C)>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant8<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, (QualName, Vec<Attribute>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Attribute, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, NodeId, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, QualName, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<Attribute>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, alloc::vec::Vec<NodeId>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, core::option::Option<&'source str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'source,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>
    ) -> (Location, &'source str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr = TAG_NAME, TAG_EQUALS, AttrValue => ActionFn(19);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action19::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 0)
    }
    pub(crate) fn __reduce1<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr* = Attr+ => ActionFn(50);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr => ActionFn(55);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action55::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 2)
    }
    pub(crate) fn __reduce4<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attr+ = Attr+, Attr => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action56::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce5<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // AttrValue = ATTVALUE_VALUE => ActionFn(18);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs =  => ActionFn(59);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action59::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Attrs = Attr+ => ActionFn(60);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action60::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ClosingTag = TAG_OPEN, TAG_SLASH, TAG_NAME, TAG_CLOSE => ActionFn(22);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action22::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 5)
    }
    pub(crate) fn __reduce9<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? = DTD => ActionFn(51);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // DTD? =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce11<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = SingleTag => ActionFn(25);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce12<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Element = ParentTag => ActionFn(26);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_COMMENT => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce14<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // HtmlComment = HTML_CONDITIONAL_COMMENT => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    pub(crate) fn __reduce15<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = Element => ActionFn(31);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = TextNode => ActionFn(32);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action32::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce17<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = HtmlComment => ActionFn(33);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = scriptlet => ActionFn(34);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce19<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = cdata => ActionFn(35);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce20<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = script => ActionFn(36);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce21<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = style => ActionFn(37);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce22<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node = XMLorPINode => ActionFn(38);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action38::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce23<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce24<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node* = Node+ => ActionFn(48);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action48::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce25<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node => ActionFn(57);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action57::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce26<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // Node+ = Node+, Node => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action58::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce27<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // OpeningTag = TAG_OPEN, TAG_NAME, Attrs, TAG_CLOSE => ActionFn(21);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action21::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (4, 12)
    }
    pub(crate) fn __reduce28<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, ClosingTag => ActionFn(63);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action63::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 13)
    }
    pub(crate) fn __reduce29<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // ParentTag = OpeningTag, Node+, ClosingTag => ActionFn(64);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant4(__symbols);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action64::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce30<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // SingleTag = TAG_OPEN, TAG_NAME, Attrs, TAG_SLASH_CLOSE => ActionFn(23);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant3(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action23::<C>(input, document, root, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (4, 14)
    }
    pub(crate) fn __reduce31<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // TextNode = HTML_TEXT => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? = XML => ActionFn(53);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action53::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce33<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XML? =  => ActionFn(54);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action54::<C>(input, document, root, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce34<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // XMLorPINode = XML => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce35<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attr = Attr => ActionFn(2);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce36<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __AttrValue = AttrValue => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant0(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce37<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Attrs = Attrs => ActionFn(3);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce38<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ClosingTag = ClosingTag => ActionFn(5);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce39<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Element = Element => ActionFn(8);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce40<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __HtmlComment = HtmlComment => ActionFn(9);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __Node = Node => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce42<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __OpeningTag = OpeningTag => ActionFn(4);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce43<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __ParentTag = ParentTag => ActionFn(7);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce44<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __SingleTag = SingleTag => ActionFn(6);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce45<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __cdata = cdata => ActionFn(11);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce46<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __htmlDocument = htmlDocument => ActionFn(0);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action0::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce47<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script = script => ActionFn(13);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce48<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __script_inner = script_inner => ActionFn(14);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce49<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __scriptlet = scriptlet => ActionFn(12);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce50<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // __style = style => ActionFn(15);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce52<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // cdata = CDATA => ActionFn(39);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action39::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce53<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, DTD, Node => ActionFn(65);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action65::<C>(input, document, root, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (3, 36)
    }
    pub(crate) fn __reduce54<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = DTD, Node => ActionFn(66);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action66::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce55<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = XML, Node => ActionFn(67);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action67::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 36)
    }
    pub(crate) fn __reduce56<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // htmlDocument = Node => ActionFn(68);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce57<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script = SCRIPT_OPEN, script_inner => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action41::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce58<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_BODY => ActionFn(42);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action42::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce59<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // script_inner = SCRIPT_SHORT_BODY => ActionFn(43);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce60<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // scriptlet = SCRIPTLET => ActionFn(40);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce61<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style = STYLE_OPEN, style_inner => ActionFn(44);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action44::<C>(input, document, root, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce62<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_BODY => ActionFn(45);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action45::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce63<
        'source,
        C,
    >(
        input: &'source str,
        document: &mut Arena<AuthT<Node, C>>,
        root: &mut Option<NodeId>,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'source>,Location)>,
        _: core::marker::PhantomData<(&'source (), C)>,
    ) -> (usize, usize)
    where
        C: AuthType<Node>,
        C: Computation,
    {
        // style_inner = STYLE_SHORT_BODY => ActionFn(46);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<C>(input, document, root, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 41)
    }
}
pub use self::__parse__style_inner::style_innerParser;

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action0<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action1<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, &'source str, Location),
) -> &'source str
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action2<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, Attribute, Location),
) -> Attribute
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action3<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, Vec<Attribute>, Location),
) -> Vec<Attribute>
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action4<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, (QualName, Vec<Attribute>), Location),
) -> (QualName, Vec<Attribute>)
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action5<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, QualName, Location),
) -> QualName
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action6<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action7<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action8<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action9<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action10<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action11<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action12<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action13<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action14<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action15<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action16<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action17<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, _, _): (Location, core::option::Option<&'source str>, Location),
    (_, _, _): (Location, core::option::Option<&'source str>, Location),
    (_, root_element, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    {

        let inner_document = Node::Document;

        let doc = C::auth(inner_document);

        let root_id = document.new_node(doc);
        
        root_id.append(root_element,document);

        *root = Some(root_id);

        root_id

}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action18<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, &'source str, Location),
) -> &'source str
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action19<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, name, _): (Location, &'source str, Location),
    (_, _, _): (Location, &'source str, Location),
    (_, value, _): (Location, &'source str, Location),
) -> Attribute
where
    C: AuthType<Node>,
    C: Computation,
{
    Attribute {
                        name : QualName::new(None,NodeString::from(""),NodeString::from(name)),
                        value: NodeString::from(value)
                    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action20<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, alloc::vec::Vec<Attribute>, Location),
) -> Vec<Attribute>
where
    C: AuthType<Node>,
    C: Computation,
{
    __0.into()
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action21<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, _, _): (Location, &'source str, Location),
    (_, name, _): (Location, &'source str, Location),
    (_, attrs, _): (Location, Vec<Attribute>, Location),
    (_, _, _): (Location, &'source str, Location),
) -> (QualName, Vec<Attribute>)
where
    C: AuthType<Node>,
    C: Computation,
{
    (QualName::new(None,NodeString::from(""),NodeString::from(name)),attrs)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action22<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, _, _): (Location, &'source str, Location),
    (_, _, _): (Location, &'source str, Location),
    (_, name, _): (Location, &'source str, Location),
    (_, _, _): (Location, &'source str, Location),
) -> QualName
where
    C: AuthType<Node>,
    C: Computation,
{
    QualName::new(None,NodeString::from(""),NodeString::from(name))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action23<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, _, _): (Location, &'source str, Location),
    (_, name, _): (Location, &'source str, Location),
    (_, attrs, _): (Location, Vec<Attribute>, Location),
    (_, _, _): (Location, &'source str, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    {


    let inner_element = Node::Element(Element::new(QualName::new(None,NodeString::from(""),NodeString::from(name)),attrs));


    let e = C::auth(inner_element);

    document.new_node(e)

}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action24<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, opening, _): (Location, (QualName, Vec<Attribute>), Location),
    (_, children, _): (Location, alloc::vec::Vec<NodeId>, Location),
    (_, closing, _): (Location, QualName, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    {


    let inner_element = Node::Element(Element::new(opening.0,opening.1));


    let e = C::auth(inner_element);



    let parent_id = document.new_node(e);

    for child_id in children {
        parent_id.append(child_id,document);
    }
    
    parent_id

}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action25<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action26<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action27<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, comment, _): (Location, &'source str, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    {
        let inner_element = Node::Comment(Comment{
            comment: NodeString::from(comment),
        });
    
        let e = C::auth(inner_element);
    
        document.new_node(e)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action28<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, comment, _): (Location, &'source str, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    {
        let inner_element = Node::Comment(Comment{
            comment: NodeString::from(comment),
        });
    
        let e = C::auth(inner_element);
    
        document.new_node(e)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action29<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, text, _): (Location, &'source str, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    {

    let inner_element = Node::Text(Text{
        text: NodeString::from(text),
    });

    let e = C::auth(inner_element);

    document.new_node(e)
}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action30<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, pi, _): (Location, &'source str, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    {

    let inner_element = Node::ProcessingInstruction(ProcessingInstruction{
        target: NodeString::from(""),
        data: NodeString::from(pi),
    });

    let e = C::auth(inner_element);

    document.new_node(e)
}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action31<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action32<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action33<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action34<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action35<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action36<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action37<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action38<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action39<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, text, _): (Location, &'source str, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    {

    let inner_element = Node::Text(Text{
        text: NodeString::from(text),
    });

    let e = C::auth(inner_element);

    document.new_node(e)
}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action40<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, pi, _): (Location, &'source str, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    {

    let inner_element = Node::ProcessingInstruction(ProcessingInstruction{
        target: NodeString::from(""),
        data: NodeString::from(pi),
    });

    let e = C::auth(inner_element);

    document.new_node(e)
}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action41<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, _, _): (Location, &'source str, Location),
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action42<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, text, _): (Location, &'source str, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    {
        let script_body_text = Node::Text(Text{
            text: NodeString::from(text),
        });
    
        let script_body = C::auth(script_body_text);
    
        let script_body_id = document.new_node(script_body);

        let script_element = Node::Element(Element::new(QualName::new(None,NodeString::from(""),NodeString::from("script")),Vec::new()));

        let script_element_id = document.new_node(C::auth(script_element));

        script_element_id.append(script_body_id,document);    
        
        script_element_id

    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action43<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, text, _): (Location, &'source str, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    {
        let script_body_text = Node::Text(Text{
            text: NodeString::from(text),
        });
    
        let script_body = C::auth(script_body_text);
    
        let script_body_id = document.new_node(script_body);

        let script_element = Node::Element(Element::new(QualName::new(None,NodeString::from(""),NodeString::from("script")),Vec::new()));

        let script_element_id = document.new_node(C::auth(script_element));

        script_element_id.append(script_body_id,document);    
        
        script_element_id

    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action44<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, _, _): (Location, &'source str, Location),
    (_, __0, _): (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action45<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, text, _): (Location, &'source str, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    {

        let style_body_text = Node::Text(Text{
            text: NodeString::from(text),
        });
    
        let style_body = C::auth(style_body_text);
    
        let style_body_id = document.new_node(style_body);

        let style_element = Node::Element(Element::new(QualName::new(None,NodeString::from(""),NodeString::from("style")),Vec::new()));

        let style_element_id = document.new_node(C::auth(style_element));

        style_element_id.append(style_body_id,document);    
        
        style_element_id
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action46<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, text, _): (Location, &'source str, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    {
        let style_body_text = Node::Text(Text{
            text: NodeString::from(text),
        });
    
        let style_body = C::auth(style_body_text);
    
        let style_body_id = document.new_node(style_body);

        let style_element = Node::Element(Element::new(QualName::new(None,NodeString::from(""),NodeString::from("style")),Vec::new()));

        let style_element_id = document.new_node(C::auth(style_element));

        style_element_id.append(style_body_id,document);    
        
        style_element_id

    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action47<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> alloc::vec::Vec<NodeId>
where
    C: AuthType<Node>,
    C: Computation,
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action48<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, v, _): (Location, alloc::vec::Vec<NodeId>, Location),
) -> alloc::vec::Vec<NodeId>
where
    C: AuthType<Node>,
    C: Computation,
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action49<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> alloc::vec::Vec<Attribute>
where
    C: AuthType<Node>,
    C: Computation,
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action50<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, v, _): (Location, alloc::vec::Vec<Attribute>, Location),
) -> alloc::vec::Vec<Attribute>
where
    C: AuthType<Node>,
    C: Computation,
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action51<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, &'source str, Location),
) -> core::option::Option<&'source str>
where
    C: AuthType<Node>,
    C: Computation,
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action52<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> core::option::Option<&'source str>
where
    C: AuthType<Node>,
    C: Computation,
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action53<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, &'source str, Location),
) -> core::option::Option<&'source str>
where
    C: AuthType<Node>,
    C: Computation,
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action54<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> core::option::Option<&'source str>
where
    C: AuthType<Node>,
    C: Computation,
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action55<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, Attribute, Location),
) -> alloc::vec::Vec<Attribute>
where
    C: AuthType<Node>,
    C: Computation,
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action56<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, v, _): (Location, alloc::vec::Vec<Attribute>, Location),
    (_, e, _): (Location, Attribute, Location),
) -> alloc::vec::Vec<Attribute>
where
    C: AuthType<Node>,
    C: Computation,
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action57<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, __0, _): (Location, NodeId, Location),
) -> alloc::vec::Vec<NodeId>
where
    C: AuthType<Node>,
    C: Computation,
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action58<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    (_, v, _): (Location, alloc::vec::Vec<NodeId>, Location),
    (_, e, _): (Location, NodeId, Location),
) -> alloc::vec::Vec<NodeId>
where
    C: AuthType<Node>,
    C: Computation,
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action59<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Vec<Attribute>
where
    C: AuthType<Node>,
    C: Computation,
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action49::<
    C,
    >(
        input,
        document,
        root,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action20::<
    C,
    >(
        input,
        document,
        root,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action60<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __0: (Location, alloc::vec::Vec<Attribute>, Location),
) -> Vec<Attribute>
where
    C: AuthType<Node>,
    C: Computation,
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action50::<
    C,
    >(
        input,
        document,
        root,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action20::<
    C,
    >(
        input,
        document,
        root,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action61<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __0: (Location, core::option::Option<&'source str>, Location),
    __1: (Location, &'source str, Location),
    __2: (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action51::<
    C,
    >(
        input,
        document,
        root,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action17::<
    C,
    >(
        input,
        document,
        root,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action62<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __0: (Location, core::option::Option<&'source str>, Location),
    __1: (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action52::<
    C,
    >(
        input,
        document,
        root,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action17::<
    C,
    >(
        input,
        document,
        root,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action63<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __0: (Location, (QualName, Vec<Attribute>), Location),
    __1: (Location, QualName, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action47::<
    C,
    >(
        input,
        document,
        root,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action24::<
    C,
    >(
        input,
        document,
        root,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action64<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __0: (Location, (QualName, Vec<Attribute>), Location),
    __1: (Location, alloc::vec::Vec<NodeId>, Location),
    __2: (Location, QualName, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action48::<
    C,
    >(
        input,
        document,
        root,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action24::<
    C,
    >(
        input,
        document,
        root,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action65<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __0: (Location, &'source str, Location),
    __1: (Location, &'source str, Location),
    __2: (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action53::<
    C,
    >(
        input,
        document,
        root,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61::<
    C,
    >(
        input,
        document,
        root,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action66<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __0: (Location, &'source str, Location),
    __1: (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action54::<
    C,
    >(
        input,
        document,
        root,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61::<
    C,
    >(
        input,
        document,
        root,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action67<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __0: (Location, &'source str, Location),
    __1: (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action53::<
    C,
    >(
        input,
        document,
        root,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action62::<
    C,
    >(
        input,
        document,
        root,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments)]
fn __action68<
    'source,
    C,
>(
    input: &'source str,
    document: &mut Arena<AuthT<Node, C>>,
    root: &mut Option<NodeId>,
    __0: (Location, NodeId, Location),
) -> NodeId
where
    C: AuthType<Node>,
    C: Computation,
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action54::<
    C,
    >(
        input,
        document,
        root,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action62::<
    C,
    >(
        input,
        document,
        root,
        __temp0,
        __0,
    )
}
#[allow(clippy::type_complexity)]

pub trait __ToTriple<'source, C, >
where C: AuthType<Node>,C: Computation
{
    fn to_triple(value: Self) -> Result<(Location,Tokens<'source>,Location), __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>>;
}

impl<'source, C, > __ToTriple<'source, C, > for (Location, Tokens<'source>, Location)
where C: AuthType<Node>,C: Computation
{
    fn to_triple(value: Self) -> Result<(Location,Tokens<'source>,Location), __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>> {
        Ok(value)
    }
}
impl<'source, C, > __ToTriple<'source, C, > for Result<(Location, Tokens<'source>, Location), LexicalError>
where C: AuthType<Node>,C: Computation
{
    fn to_triple(value: Self) -> Result<(Location,Tokens<'source>,Location), __lalrpop_util::ParseError<Location, Tokens<'source>, LexicalError>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
