
use crate::lexer::{Tokens,Location,LexicalError};


use std::vec::Vec;
use std::string::String;

use authcomp::{AuthT,Computation,AuthType,ProofStream};
use authdoc::{Node,Element,Comment,ProcessingInstruction,Text,Doctype,Attribute,Str,QualName,NodeString};
use crate::Filter;

use indextree::{NodeId,Arena};


grammar<'source,C>(input: &'source str,document: &mut Arena <AuthT<Node,C>>,root: &mut Option<NodeId>, filter: &dyn Filter<QualName>) 
    where
        C:AuthType<Node>,
        C:Computation;
        
//Lexer


extern {
    type Location = Location;
    type Error = LexicalError;

    enum Tokens<'source> {
        HTML_COMMENT => Tokens::HtmlComment(<&'source str>),
        XML => Tokens::XmlDeclarationOrPi(<&'source str>),
        CDATA => Tokens::CdataDeclaration(<&'source str>),
        HTML_CONDITIONAL_COMMENT=> Tokens::HtmlConditionalComment(<&'source str>),
        DTD => Tokens::DtdDeclaration(<&'source str>),
        SCRIPTLET => Tokens::ScripletDeclaration(<&'source str>),
        //SEA_WS => Tokens::SeaWS(<&'source str>),
        SCRIPT_OPEN => Tokens::ScriptOpen(<&'source str>),
        STYLE_OPEN => Tokens::StyleOpen(<&'source str>),
        TAG_OPEN => Tokens::TagOpen(<&'source str>),
        HTML_TEXT => Tokens::HtmlText(<&'source str>),

        TAG_CLOSE => Tokens::TagClose(<&'source str>),
        TAG_SLASH_CLOSE => Tokens::TagSlashClose(<&'source str>),
        TAG_SLASH => Tokens::TagSlash(<&'source str>),
        TAG_EQUALS => Tokens::TagEquals(<&'source str>),
        TAG_NAME => Tokens::TagName(<&'source str>),
    

        SCRIPT_BODY => Tokens::ScriptBody(<&'source str>),
        SCRIPT_SHORT_BODY => Tokens::ScriptShortBody(<&'source str>),
    

        STYLE_BODY=> Tokens::StyleBody(<&'source str>),
        STYLE_SHORT_BODY => Tokens::StyleShortBody(<&'source str>),
    
   
        ATTVALUE_VALUE => Tokens::AttributeValue(<&'source str>),
    }
}

// Parser


pub jatsDocument : NodeId =   XML? DTD? <root_element:Node> => {

        let inner_document = Node::Document;

        let doc = C::auth(inner_document);

        let root_id = document.new_node(doc);
        
        if let Some(r_id) = root_element {
            root_id.append(r_id,document);
        }

        *root = Some(root_id);

        root_id

};

pub AttrValue = ATTVALUE_VALUE;

pub Attr  : Attribute = <name:TAG_NAME> TAG_EQUALS <value:AttrValue> => Attribute {
                        name : QualName::new(None,NodeString::from(""),NodeString::from(name)),
                        value: NodeString::from(value)
                    };


pub Attrs : Vec<Attribute> = Attr* => <>.into();

pub OpeningTag : (QualName,Vec<Attribute>) = TAG_OPEN <name:TAG_NAME> <attrs:Attrs> TAG_CLOSE => (QualName::new(None,NodeString::from(""),NodeString::from(name)),attrs);

pub ClosingTag : QualName = TAG_OPEN TAG_SLASH <name:TAG_NAME> TAG_CLOSE => QualName::new(None,NodeString::from(""),NodeString::from(name));


pub SingleTag :Option<NodeId> = TAG_OPEN <name:TAG_NAME> <attrs:Attrs> TAG_SLASH_CLOSE => {


    let inner_element = Node::Element(Element::new(QualName::new(None,NodeString::from(""),NodeString::from(name)),attrs));


    let e = C::auth(inner_element);

    Some(document.new_node(e))

};

pub ParentTag : Option<NodeId> = <opening:OpeningTag> <children:Node*> <closing:ClosingTag>  => 

    {


        

        if ! Filter::<QualName>::filter(filter,&opening.0) {

            println!("OpeningTag: {:?}",opening);
            let inner_element = Node::Element(Element::new(opening.0,opening.1));


            let e = C::auth(inner_element);


            let parent_id = document.new_node(e);

            for child_id in children {
                if let Some(n_id) = child_id{
                    parent_id.append(n_id,document);
                }
            }
            
            Some(parent_id)
        }else {
            None
        }


};

pub Element : Option<NodeId> = {
    SingleTag,
    ParentTag,
};


pub HtmlComment : Option<NodeId> = {
    <comment:HTML_COMMENT> => {
        let inner_element = Node::Comment(Comment{
            comment: NodeString::from(comment),
        });
    
        let e = C::auth(inner_element);
    
        Some(document.new_node(e))
    },
    <comment:HTML_CONDITIONAL_COMMENT> => {
        let inner_element = Node::Comment(Comment{
            comment: NodeString::from(comment),
        });
    
        let e = C::auth(inner_element);
    
        Some(document.new_node(e))
    }
}


TextNode: Option<NodeId> = <text:HTML_TEXT> => {

    let inner_element = Node::Text(Text{
        text: NodeString::from(text),
    });

    let e = C::auth(inner_element);

    Some(document.new_node(e))
};

XMLorPINode: Option<NodeId> = <pi:XML> => {

    let inner_element = Node::ProcessingInstruction(ProcessingInstruction{
        target: NodeString::from(""),
        data: NodeString::from(pi),
    });

    let e = C::auth(inner_element);

    Some(document.new_node(e))
};

pub Node: Option<NodeId> = {
    Element,
    TextNode,
    HtmlComment,
    scriptlet,
    cdata,
    //seaws,
    script,
    style,
    XMLorPINode
};

pub cdata : Option<NodeId> = <text:CDATA> => {

    let inner_element = Node::Text(Text{
        text: NodeString::from(text),
    });

    let e = C::auth(inner_element);

    Some(document.new_node(e))
};


//pub seaws : NodeId = <text:SEA_WS> => {
//
//    let inner_element = Node::Text(Text{
//        text: NodeString::from(text),
//    });
//
//   let e = C::auth(inner_element);
//
//    document.new_node(e)
//};


pub scriptlet : Option<NodeId> = <pi:SCRIPTLET> => {

    let inner_element = Node::ProcessingInstruction(ProcessingInstruction{
        target: NodeString::from(""),
        data: NodeString::from(pi),
    });

    let e = C::auth(inner_element);

    Some(document.new_node(e))
};


pub script : Option<NodeId> = SCRIPT_OPEN <script_inner>;

pub script_inner : Option<NodeId> = {
    <text:SCRIPT_BODY> => {
        let script_body_text = Node::Text(Text{
            text: NodeString::from(text),
        });
    
        let script_body = C::auth(script_body_text);
    
        let script_body_id = document.new_node(script_body);

        let script_element = Node::Element(Element::new(QualName::new(None,NodeString::from(""),NodeString::from("script")),Vec::new()));

        let script_element_id = document.new_node(C::auth(script_element));

        script_element_id.append(script_body_id,document);    
        
        Some(script_element_id)

    },
    <text:SCRIPT_SHORT_BODY> => {
        let script_body_text = Node::Text(Text{
            text: NodeString::from(text),
        });
    
        let script_body = C::auth(script_body_text);
    
        let script_body_id = document.new_node(script_body);

        let script_element = Node::Element(Element::new(QualName::new(None,NodeString::from(""),NodeString::from("script")),Vec::new()));

        let script_element_id = document.new_node(C::auth(script_element));

        script_element_id.append(script_body_id,document);    
        
        Some(script_element_id)

    }

};


pub style : Option<NodeId> =STYLE_OPEN <style_inner>;


pub style_inner : Option<NodeId> =  {
    <text:STYLE_BODY> => {

        let style_body_text = Node::Text(Text{
            text: NodeString::from(text),
        });
    
        let style_body = C::auth(style_body_text);
    
        let style_body_id = document.new_node(style_body);

        let style_element = Node::Element(Element::new(QualName::new(None,NodeString::from(""),NodeString::from("style")),Vec::new()));

        let style_element_id = document.new_node(C::auth(style_element));

        style_element_id.append(style_body_id,document);    
        
        Some(style_element_id)
    },
    <text:STYLE_SHORT_BODY> => {
        let style_body_text = Node::Text(Text{
            text: NodeString::from(text),
        });
    
        let style_body = C::auth(style_body_text);
    
        let style_body_id = document.new_node(style_body);

        let style_element = Node::Element(Element::new(QualName::new(None,NodeString::from(""),NodeString::from("style")),Vec::new()));

        let style_element_id = document.new_node(C::auth(style_element));

        style_element_id.append(style_body_id,document);    
        
        Some(style_element_id)

    }

};

