

grammar<'source>(input: &'source str);

use super::types::*;
use std::vec::Vec;
use anyhow::Result;

use super::lexer::Token;

//Lexer
extern {

    enum Token<'source> {
        SLASH => Token::Slash,
        COLON => Token::Colon,
        AT => Token::At,
        TILDE => Token::Tilde,
        COMMA => Token::Comma,
        SEMICOLON => Token::Semicolon,
        EQUALS => Token::Equals,
        OPENBRACKET => Token::OpenBracket,
        CLOSEBRACKET => Token::CloseBracket,
        OPENPAREN => Token::OpenParen,
        CLOSEPAREN => Token::CloseParen,
        CIRCUNFLEX => Token::Circumflex,
        EXCLAMATION => Token::Exclamation,
        INTEGER => Token::Integer(<&'source str>),
        ZERO => Token::Zero,
        VALUESPACE => Token::ValueSpace(<&'source str>),
        VALUENOSPACE => Token::ValueNoSpace(<&'source str>),
        NUMBER => Token::Number(<&'source str>),
        EPUBCFI => Token::EpubCFI

  }
}

pub Fragment: Fragment = {
    EPUBCFI OPENPAREN <path: Path> <range: Range?> CLOSEPAREN => Fragment::new(path, range),
};

Path: Path = {
   <local_path: LocalPath> => Path::new(local_path),
};

Range: Range = {
    COMMA <start: LocalPath> COMMA <end: LocalPath> => Range::new(start, end),
};

LocalPath: LocalPath = {
    <steps: Steps> <end: EndOfPath?> => LocalPath::new(steps,end),
};

pub Steps : Vec<Step> = Step+ => <>.into();

EndOfPath: EndOfPath = {
    EXCLAMATION <offset: Offset> => EndOfPath::redirected_path( RedirectedPath::new(Some(offset),None) ),
    EXCLAMATION <path: Path> => EndOfPath::redirected_path( RedirectedPath::new(None, Some(path))),
    <offset: Offset> => EndOfPath::offset(offset),
};

Step: Step = {
    SLASH <integer: Integer> => Step::new(integer, None) ,
    SLASH <integer: Integer> OPENBRACKET <assertion: Assertion> CLOSEBRACKET => Step::new(integer, Some(assertion)),
};

Offset: Offset = {
    COLON <integer: Integer> => Offset::SimpleOffset(integer),
    AT <num1: Number> COLON <num2: Number> => Offset::OffsetWithReference(num1, num2),
    TILDE <num: Number> => Offset::IdAssertion(num, None),
    TILDE <num1: Number> AT <num2: Number> COLON <num3: Number> => Offset::IdAssertion(num1, Some((num2, num3))),
};


Assertion: String = {
    <value: Value> => value,
    <value: Value> COMMA <value2: Value> => format!("{},{}", value, value2),
    COMMA <value: Value> => format!(",{}", value),
    <param: Parameter> => param,
};

Parameter: String = {
    SEMICOLON <value: ValueNoSpace> EQUALS <csv: Csv> => format!("{}={}", value, csv),
};

Csv: String = {
    <value: Value> => value,
    <value: Value> COMMA <csv: Csv> => format!("{},{}", value, csv),
};

Number: String = NUMBER => <>.to_string();

Integer: String = INTEGER => <>.to_string();
Value: String =  {
            VALUESPACE => <>.to_string(),
            VALUENOSPACE => <>.to_string()
};

ValueNoSpace : String = VALUENOSPACE => <>.to_string();


